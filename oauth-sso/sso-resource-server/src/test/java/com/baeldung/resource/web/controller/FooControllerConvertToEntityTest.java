// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security-oauth-oauth-sso using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=convertToEntity_c72f14b1bd
ROOST_METHOD_SIG_HASH=convertToEntity_7c20de3038

Scenario 1: Successful conversion without an ID
Details:
  TestName: convertDtoToEntityWithoutId
  Description: This test checks if the convertToEntity method correctly creates a Foo entity from a FooDto when the ID is null or empty.
Execution:
  Arrange: Create a FooDto instance with a non-empty name and a null or empty ID.
  Act: Call the convertToEntity method with this FooDto instance.
  Assert: Verify that the returned Foo object has the expected name and a null or uninitialized ID.
Validation:
  The assertion verifies that the Foo object's name matches the FooDto's name and that the ID is not set when it is not provided. This is significant because it ensures that new entities are created correctly when no ID is given.

Scenario 2: Successful conversion with an ID
Details:
  TestName: convertDtoToEntityWithId
  Description: This test ensures that the convertToEntity method sets the ID on the Foo entity when provided in the FooDto.
Execution:
  Arrange: Create a FooDto instance with a non-empty name and a non-empty ID.
  Act: Call the convertToEntity method with this FooDto instance.
  Assert: Verify that the returned Foo object has the expected name and ID as per the FooDto.
Validation:
  The assertion checks that the Foo object's ID is set according to the ID provided in the FooDto. This test confirms that entities are correctly updated with their IDs when converting from DTO to entity.

Scenario 3: Conversion with an empty string ID
Details:
  TestName: convertDtoToEntityWithEmptyStringId
  Description: This test checks the behavior of the convertToEntity method when the ID in the FooDto is an empty string.
Execution:
  Arrange: Create a FooDto instance with a non-empty name and an empty string as the ID.
  Act: Call the convertToEntity method with this FooDto instance.
  Assert: Verify that the returned Foo object has the expected name and a null or uninitialized ID.
Validation:
  The assertion ensures that the Foo object does not have an ID set when the ID provided in the FooDto is an empty string. This is important for maintaining data integrity and avoiding the creation of entities with invalid IDs.

Scenario 4: Conversion with a whitespace ID
Details:
  TestName: convertDtoToEntityWithWhitespaceId
  Description: This test assesses the convertToEntity method's handling of a FooDto with an ID consisting of whitespace.
Execution:
  Arrange: Create a FooDto instance with a non-empty name and an ID that is a whitespace string.
  Act: Call the convertToEntity method with this FooDto instance.
  Assert: Verify that the returned Foo object has the expected name and a null or uninitialized ID.
Validation:
  This test ensures that the convertToEntity method treats whitespace IDs as empty, thereby preventing the creation of entities with invalid whitespace IDs.

Scenario 5: Conversion with null name
Details:
  TestName: convertDtoToEntityWithNullName
  Description: This test checks how the convertToEntity method handles a FooDto instance with a null name value.
Execution:
  Arrange: Create a FooDto instance with a null name and any ID value.
  Act: Call the convertToEntity method with this FooDto instance.
  Assert: Verify that the returned Foo object has a null name and the ID matches the FooDto (if provided).
Validation:
  The assertion checks that the Foo object correctly reflects a null name when the FooDto has a null name. This test is critical to ensure that the application can handle null name values without throwing exceptions.

Scenario 6: Conversion with non-empty name and ID
Details:
  TestName: convertDtoToEntityWithNonEmptyNameAndId
  Description: This test verifies that the convertToEntity method properly sets both the name and ID of the Foo entity when both are provided in the FooDto.
Execution:
  Arrange: Create a FooDto instance with a non-empty name and a non-empty ID.
  Act: Call the convertToEntity method with this FooDto instance.
  Assert: Verify that the returned Foo object has the same name and ID as the FooDto.
Validation:
  The assertion confirms that both the name and ID of the Foo object match those of the FooDto. This validation is crucial for ensuring that entity conversion preserves all provided information.
*/

// ********RoostGPT********
package com.baeldung.resource.web.controller;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.util.StringUtils;

import com.baeldung.resource.persistence.model.Foo;
import com.baeldung.resource.service.IFooService;
import com.baeldung.resource.web.dto.FooDto;

public class FooControllerConvertToEntityTest {

    private FooController fooController;
    private IFooService fooServiceMock;

    @Before
    public void setUp() {
        fooServiceMock = Mockito.mock(IFooService.class);
        fooController = new FooController(fooServiceMock);
    }

    @Test
    public void convertDtoToEntityWithoutId() {
        FooDto dto = new FooDto(null, "Test Name");

        Foo result = fooController.convertToEntity(dto);

        assertNull(result.getId());
        assertEquals("Test Name", result.getName());
    }

    @Test
    public void convertDtoToEntityWithId() {
        FooDto dto = new FooDto(1L, "Test Name");

        Foo result = fooController.convertToEntity(dto);

        assertEquals(Long.valueOf(1), result.getId());
        assertEquals("Test Name", result.getName());
    }

    @Test
    public void convertDtoToEntityWithEmptyStringId() {
        FooDto dto = new FooDto("", "Test Name");

        Foo result = fooController.convertToEntity(dto);

        assertNull(result.getId());
        assertEquals("Test Name", result.getName());
    }

    @Test
    public void convertDtoToEntityWithWhitespaceId() {
        FooDto dto = new FooDto("   ", "Test Name");

        Foo result = fooController.convertToEntity(dto);

        assertNull(result.getId());
        assertEquals("Test Name", result.getName());
    }

    @Test
    public void convertDtoToEntityWithNullName() {
        FooDto dto = new FooDto(1L, null);

        Foo result = fooController.convertToEntity(dto);

        assertEquals(Long.valueOf(1), result.getId());
        assertNull(result.getName());
    }

    @Test
    public void convertDtoToEntityWithNonEmptyNameAndId() {
        FooDto dto = new FooDto(1L, "Test Name");

        Foo result = fooController.convertToEntity(dto);

        assertEquals(Long.valueOf(1), result.getId());
        assertEquals("Test Name", result.getName());
    }

    // Additional test for non-existing scenario: conversion of a null dto
    @Test(expected = NullPointerException.class)
    public void convertDtoToEntityWithNullDto() {
        FooDto dto = null;

        fooController.convertToEntity(dto);
    }
}
