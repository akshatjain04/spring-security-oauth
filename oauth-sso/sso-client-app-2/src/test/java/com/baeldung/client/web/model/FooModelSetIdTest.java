// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security-oauth-oauth-sso using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=setId_b802c080bf
ROOST_METHOD_SIG_HASH=setId_04a8e16b7c

Scenario 1: Setting a valid non-null ID

Details:
  TestName: setIdWithNonNullValue
  Description: The test will verify that the setId method correctly assigns a valid non-null ID to the object.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with a valid non-null Long value.
  Assert: Assert that the object's ID field is set to the expected Long value.
Validation:
  The assertion confirms that the ID field holds the correct non-null value. The test ensures that the setId method behaves as expected when provided with a valid ID, which is crucial for correctly identifying objects.

Scenario 2: Setting an ID with a null value

Details:
  TestName: setIdWithNullValue
  Description: The test will check if the setId method can handle a null input without throwing an exception, assuming the field can be set to null.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with a null value.
  Assert: Assert that the object's ID field is set to null.
Validation:
  The assertion checks that the ID field is null after the method call. This test is significant because it ensures that the setId method can handle null inputs gracefully, which may be necessary for certain application logic or to represent an uninitialized state.

Scenario 3: Setting an ID with a negative value

Details:
  TestName: setIdWithNegativeValue
  Description: The test will verify that the setId method correctly assigns a negative Long value, assuming negative values are valid in the application context.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with a negative Long value.
  Assert: Assert that the object's ID field is set to the negative Long value.
Validation:
  The assertion checks that the ID field holds the correct negative value. This test is important to confirm that the setId method can handle negative values, which may be used in certain business scenarios or error conditions.

Scenario 4: Reassigning a different ID

Details:
  TestName: setIdWithDifferentValue
  Description: The test will ensure that the setId method can update the object's ID field if it is called more than once with different values.
Execution:
  Arrange: Create an instance of the class containing the setId method and set an initial ID value.
  Act: Call the setId method with a new different Long value.
  Assert: Assert that the object's ID field is updated to the new Long value.
Validation:
  The assertion verifies that the ID field reflects the new value after the setId call. This test confirms that the setId method allows for the ID to be changed, which is essential for scenarios where object re-identification is required.

Scenario 5: Setting an ID with the maximum Long value

Details:
  TestName: setIdWithMaxLongValue
  Description: The test will check if the setId method correctly assigns the maximum value of a Long type.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with Long.MAX_VALUE.
  Assert: Assert that the object's ID field is set to Long.MAX_VALUE.
Validation:
  The assertion ensures that the ID field can handle the maximum Long value. This test is critical for verifying that the setId method supports the full range of Long values without overflow or data loss.

Scenario 6: Setting an ID with the minimum Long value

Details:
  TestName: setIdWithMinLongValue
  Description: The test will check if the setId method correctly assigns the minimum value of a Long type.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with Long.MIN_VALUE.
  Assert: Assert that the object's ID field is set to Long.MIN_VALUE.
Validation:
  The assertion ensures that the ID field can handle the minimum Long value. This test is pivotal for verifying that the setId method supports the full range of Long values without underflow or data loss.
*/

// ********RoostGPT********

package com.baeldung.client.web.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import org.junit.Before;
import org.junit.Test;

public class FooModelSetIdTest {

    private FooModel fooModel;

    @Before
    public void setUp() {
        fooModel = new FooModel();
    }

    @Test
    public void setIdWithNonNullValue() {
        Long expectedId = 123L;
        fooModel.setId(expectedId);
        assertEquals(expectedId, fooModel.getId());
    }

    @Test
    public void setIdWithNullValue() {
        fooModel.setId(null);
        assertNull(fooModel.getId());
    }

    @Test
    public void setIdWithNegativeValue() {
        Long expectedId = -123L;
        fooModel.setId(expectedId);
        assertEquals(expectedId, fooModel.getId());
    }

    @Test
    public void setIdWithDifferentValue() {
        Long initialId = 1L;
        Long newId = 2L;
        fooModel.setId(initialId);
        fooModel.setId(newId);
        assertEquals(newId, fooModel.getId());
    }

    @Test
    public void setIdWithMaxLongValue() {
        Long expectedId = Long.MAX_VALUE;
        fooModel.setId(expectedId);
        assertEquals(expectedId, fooModel.getId());
    }

    @Test
    public void setIdWithMinLongValue() {
        Long expectedId = Long.MIN_VALUE;
        fooModel.setId(expectedId);
        assertEquals(expectedId, fooModel.getId());
    }
}
