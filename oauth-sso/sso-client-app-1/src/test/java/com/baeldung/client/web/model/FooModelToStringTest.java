// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security-oauth-oauth-sso using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=toString_3c925113b3
ROOST_METHOD_SIG_HASH=toString_ceffa8036e

================================VULNERABILITIES================================
Vulnerability: Sensitive Data Exposure
Issue: The toString method exposes potentially sensitive object information, such as 'id' and 'name', which could lead to information leakage if logged or displayed in an insecure context.
Solution: Avoid including sensitive information in the toString method. Use a logging framework that allows for redacting or masking sensitive information.

Vulnerability: Logging Sensitive Information
Issue: If the 'id' or 'name' fields contain sensitive information, the default toString implementation could inadvertently expose this data in logs or error messages.
Solution: Implement a custom toString method that excludes sensitive data or masks it appropriately. Ensure that logging is configured to avoid including personal or confidential data.

================================================================================
Scenario 1: Object has non-null id and name fields

Details:  
  TestName: testToStringWithNonNullFields
  Description: This test checks whether the toString method correctly formats the string with non-null id and name fields.
Execution:
  Arrange: Create an instance of the object with specific non-null id and name values.
  Act: Call the toString method on the created instance.
  Assert: Verify that the returned string matches the expected format with the provided id and name.
Validation: 
  The assertion ensures that the toString method correctly concatenates the id and name into the expected format. This test is important to verify that the method handles standard cases with non-null fields correctly.

Scenario 2: Object has null id and non-null name field

Details:  
  TestName: testToStringWithNullId
  Description: This test checks how the toString method handles the scenario when the id field is null, but the name field is not.
Execution:
  Arrange: Create an instance of the object with a null id and a specific non-null name.
  Act: Call the toString method on the created instance.
  Assert: Verify that the returned string correctly represents the name field and handles the null id with an appropriate representation (e.g., "null" or an empty string).
Validation: 
  The assertion checks that the toString method can handle null values for the id field without causing an exception or misrepresentation. This test is significant for ensuring robustness in cases where the object might not have all fields set.

Scenario 3: Object has non-null id and null name field

Details:  
  TestName: testToStringWithNullName
  Description: This test assesses the behavior of the toString method when the name field is null, but the id is not.
Execution:
  Arrange: Create an object instance with a specific non-null id and a null name.
  Act: Call the toString method on the created instance.
  Assert: Verify that the returned string correctly represents the id field and handles the null name with an appropriate representation.
Validation: 
  The assertion confirms that the toString method can handle null values for the name field. This test ensures that the method does not break when some fields are not set, which is crucial for maintaining application stability.

Scenario 4: Object has both id and name fields as null

Details:  
  TestName: testToStringWithNullFields
  Description: This test determines the output of the toString method when both id and name fields are null.
Execution:
  Arrange: Create an instance of the object with both id and name set to null.
  Act: Call the toString method on the created instance.
  Assert: Check that the returned string represents both fields as null or empty strings, in a consistent and expected format.
Validation: 
  This assertion validates that the toString method can gracefully handle cases where all fields are null, ensuring that the method is null-safe and does not throw a NullPointerException. This scenario is vital for confirming the method's resilience. 

Scenario 5: Object has empty string name field

Details:  
  TestName: testToStringWithEmptyName
  Description: This test checks the behavior of the toString method when the name field is an empty string.
Execution:
  Arrange: Create an instance of the object with a specific id and an empty string for the name.
  Act: Call the toString method on the created instance.
  Assert: Verify that the returned string includes the id and represents the name as an empty string.
Validation: 
  The assertion checks that the toString method accurately processes an empty string for the name field. This test is relevant to ensure that the method correctly handles edge cases where the name might be an empty string.
*/

// ********RoostGPT********
package com.baeldung.client.web.model;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.Test;

public class FooModelToStringTest {
    private FooModel fooModelWithNonNullFields;
    private FooModel fooModelWithNullId;
    private FooModel fooModelWithNullName;
    private FooModel fooModelWithNullFields;
    private FooModel fooModelWithEmptyName;

    @Before
    public void setUp() {
        fooModelWithNonNullFields = new FooModel(1L, "FooName");
        fooModelWithNullId = new FooModel(null, "FooName");
        fooModelWithNullName = new FooModel(2L, null);
        fooModelWithNullFields = new FooModel(null, null);
        fooModelWithEmptyName = new FooModel(3L, "");
    }

    @Test
    public void testToStringWithNonNullFields() {
        String expected = "Foo [id=1, name=FooName]";
        String actual = fooModelWithNonNullFields.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void testToStringWithNullId() {
        String expected = "Foo [id=null, name=FooName]";
        String actual = fooModelWithNullId.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void testToStringWithNullName() {
        String expected = "Foo [id=2, name=null]";
        String actual = fooModelWithNullName.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void testToStringWithNullFields() {
        String expected = "Foo [id=null, name=null]";
        String actual = fooModelWithNullFields.toString();
        assertEquals(expected, actual);
    }

    @Test
    public void testToStringWithEmptyName() {
        String expected = "Foo [id=3, name=]";
        String actual = fooModelWithEmptyName.toString();
        assertEquals(expected, actual);
    }
}
