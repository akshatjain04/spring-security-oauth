// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security-oauth-oauth-sso using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=setId_b802c080bf
ROOST_METHOD_SIG_HASH=setId_04a8e16b7c

Scenario 1: Setting a valid non-null ID

Details:
  TestName: setIdWithNonNullValue
  Description: The test will verify that the setId method correctly assigns a valid non-null ID to the object.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with a valid non-null Long value.
  Assert: Assert that the object's ID field is set to the expected Long value.
Validation:
  The assertion confirms that the ID field holds the correct non-null value. The test ensures that the setId method behaves as expected when provided with a valid ID, which is crucial for correctly identifying objects.

Scenario 2: Setting a null ID

Details:
  TestName: setIdWithNullValue
  Description: The test will check whether the setId method can handle a null input without throwing an exception.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with a null value.
  Assert: Assert that the object's ID field is set to null.
Validation:
  The assertion verifies that the ID field is null after the method call. This test is significant because it checks the robustness of the setId method in dealing with null inputs, which could represent scenarios such as resetting an object's ID.

Scenario 3: Setting an ID with maximum Long value

Details:
  TestName: setIdWithMaxLongValue
  Description: The test will check that the setId method can handle the maximum value for a Long without any issues.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with Long.MAX_VALUE.
  Assert: Assert that the object's ID field is set to Long.MAX_VALUE.
Validation:
  The assertion checks if the ID field correctly holds the maximum Long value. This test is important to ensure that the method can handle edge cases with the largest possible Long value, which is critical for the integrity of the system when dealing with large numeric IDs.

Scenario 4: Setting an ID with minimum Long value

Details:
  TestName: setIdWithMinLongValue
  Description: The test will ensure that the setId method can assign the minimum value for a Long to the object's ID field.
Execution:
  Arrange: Create an instance of the class containing the setId method.
  Act: Call the setId method with Long.MIN_VALUE.
  Assert: Assert that the object's ID field is set to Long.MIN_VALUE.
Validation:
  The assertion validates that the ID field is set to the minimum Long value. This test is essential to confirm that the setId method can correctly handle edge cases with the smallest possible Long value, avoiding potential underflow issues.
*/

// ********RoostGPT********

package com.baeldung.client.web.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.junit.Before;
import org.junit.Test;

public class FooModelSetIdTest {

    private FooModel fooModel;

    @Before
    public void setUp() {
        fooModel = new FooModel();
    }

    @Test
    public void setIdWithNonNullValue() {
        // Arrange
        Long expectedId = 123L;
        // Act
        fooModel.setId(expectedId);
        // Assert
        assertEquals(expectedId, fooModel.getId());
    }

    @Test
    public void setIdWithNullValue() {
        // Arrange
        Long expectedId = null;
        // Act
        fooModel.setId(expectedId);
        // Assert
        assertNull(fooModel.getId());
    }

    @Test
    public void setIdWithMaxLongValue() {
        // Arrange
        Long expectedId = Long.MAX_VALUE;
        // Act
        fooModel.setId(expectedId);
        // Assert
        assertEquals(expectedId, fooModel.getId());
    }

    @Test
    public void setIdWithMinLongValue() {
        // Arrange
        Long expectedId = Long.MIN_VALUE;
        // Act
        fooModel.setId(expectedId);
        // Assert
        assertEquals(expectedId, fooModel.getId());
    }
}
