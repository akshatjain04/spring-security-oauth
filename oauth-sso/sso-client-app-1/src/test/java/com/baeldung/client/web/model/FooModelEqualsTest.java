// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security-oauth-oauth-sso using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=equals_c99964f55e
ROOST_METHOD_SIG_HASH=equals_039c844c47

================================VULNERABILITIES================================
Vulnerability: CWE-495: Private Data to Debug Output
Issue: If toString method is overridden in FooModel and includes sensitive information, the equals method may indirectly lead to exposure of this information in log files if it's used in a logging statement.
Solution: Ensure that any overridden toString methods do not include sensitive information, or use a custom method for creating log statements that excludes sensitive data.

Vulnerability: CWE-570: Expression is Always False
Issue: The check 'if (obj == null)' is always false due to earlier 'this == obj' check. If 'obj' was null, 'this == obj' would have already returned true.
Solution: Remove the redundant null check or reorganize the logic to check for null before checking 'this == obj'.

Vulnerability: CWE-597: Use of Wrong Operator in String Comparison
Issue: Using '==' to compare strings for null checks is safe, but for actual string content comparison, it checks for reference equality rather than object contents.
Solution: Use the .equals() method for string content comparison instead of '=='. For null-safe comparison, consider using Objects.equals(name, other.name).

================================================================================
Scenario 1: Objects are the same instance
Details:
  TestName: objectsAreSameInstance
  Description: This test checks if the equals method correctly identifies that the two objects are the same instance.
Execution:
  Arrange: Create an instance of FooModel and assign it to two different reference variables.
  Act: Call the equals method on one reference, passing the other reference as the parameter.
  Assert: Assert that the result is true.
Validation:
  The assertion verifies that the equals method correctly identifies that the two references point to the same object instance. This is significant as it is the most basic case of equality.

Scenario 2: Object is compared with null
Details:
  TestName: objectComparedWithNull
  Description: This test checks if the equals method returns false when the object is compared with null.
Execution:
  Arrange: Create an instance of FooModel and use null for the comparison.
  Act: Call the equals method on the instance, passing null as the parameter.
  Assert: Assert that the result is false.
Validation:
  The assertion verifies that the equals method correctly identifies that an object is not equal to null. This is important for ensuring that the method behaves correctly with null values.

Scenario 3: Objects of different classes
Details:
  TestName: objectsOfDifferentClasses
  Description: This test ensures that the equals method returns false when comparing FooModel with an instance of a different class.
Execution:
  Arrange: Create an instance of FooModel and an instance of a different class.
  Act: Call the equals method on the FooModel instance, passing the different class instance as the parameter.
  Assert: Assert that the result is false.
Validation:
  The assertion checks that the equals method respects the class type and does not consider objects of different types as equal. This is crucial for type safety and logical equality checks.

Scenario 4: Equal objects with non-null fields
Details:
  TestName: equalObjectsWithNonNullFields
  Description: This test verifies that the equals method returns true when two FooModel objects have the same non-null id and name fields.
Execution:
  Arrange: Create two instances of FooModel with the same non-null id and name fields.
  Act: Call the equals method on one instance, passing the other instance as the parameter.
  Assert: Assert that the result is true.
Validation:
  The assertion ensures that the equals method correctly identifies the equality of two objects based on their field values. This is significant for the correct functioning of equality checks within collections and other parts of the application.

Scenario 5: Objects with differing id fields
Details:
  TestName: objectsWithDifferingIdFields
  Description: This test checks if the equals method returns false when two FooModel objects have different id field values.
Execution:
  Arrange: Create two instances of FooModel with different id field values and the same name field.
  Act: Call the equals method on one instance, passing the other instance as the parameter.
  Assert: Assert that the result is false.
Validation:
  The assertion verifies that the equals method is sensitive to differences in the id field. This is important for distinguishing between different objects.

Scenario 6: Objects with differing name fields
Details:
  TestName: objectsWithDifferingNameFields
  Description: This test checks if the equals method returns false when two FooModel objects have different name field values.
Execution:
  Arrange: Create two instances of FooModel with the same id field but different name fields.
  Act: Call the equals method on one instance, passing the other instance as the parameter.
  Assert: Assert that the result is false.
Validation:
  The assertion verifies that the equals method is sensitive to differences in the name field. This is significant for maintaining the integrity of object comparisons based on distinct attributes.

Scenario 7: Objects with null id fields
Details:
  TestName: objectsWithNullIdFields
  Description: This test checks if the equals method returns true when two FooModel objects have null id fields and the same name.
Execution:
  Arrange: Create two instances of FooModel with null id fields and the same name.
  Act: Call the equals method on one instance, passing the other instance as the parameter.
  Assert: Assert that the result is true.
Validation:
  The assertion confirms that the equals method can handle null id fields and still perform an equality check based on other fields. This is relevant for cases where the id field is optional or not yet assigned.

Scenario 8: One object with null id and the other with non-null id
Details:
  TestName: oneObjectWithNullIdAndOtherWithNonNullId
  Description: This test checks if the equals method returns false when comparing two FooModel objects where one has a null id and the other has a non-null id.
Execution:
  Arrange: Create two instances of FooModel, where one has a null id and the other has a non-null id, with the same name field.
  Act: Call the equals method on the instance with the non-null id, passing the instance with the null id as the parameter.
  Assert: Assert that the result is false.
Validation:
  The assertion verifies that the equals method does not consider objects with mismatched id field states (null vs. non-null) as equal. This distinction is crucial for accurate object comparisons.

Scenario 9: Objects with null name fields
Details:
  TestName: objectsWithNullNameFields
  Description: This test checks if the equals method returns true when two FooModel objects have null name fields and the same id.
Execution:
  Arrange: Create two instances of FooModel with null name fields and the same id.
  Act: Call the equals method on one instance, passing the other instance as the parameter.
  Assert: Assert that the result is true.
Validation:
  The assertion confirms that the equals method can handle null name fields and still perform equality checks based on other fields. This is important when the name field is not a required attribute for object identity.

Scenario 10: One object with null name and the other with non-null name
Details:
  TestName: oneObjectWithNullNameAndOtherWithNonNullName
  Description: This test checks if the equals method returns false when comparing two FooModel objects where one has a null name and the other has a non-null name.
Execution:
  Arrange: Create two instances of FooModel, where one has a null name and the other has a non-null name, with the same id field.
  Act: Call the equals method on the instance with the non-null name, passing the instance with the null name as the parameter.
  Assert: Assert that the result is false.
Validation:
  The assertion verifies that the equals method does not consider objects with mismatched name field states (null vs. non-null) as equal. This is important for ensuring that objects are only considered equal if all their relevant fields match.
*/

// ********RoostGPT********

package com.baeldung.client.web.model;

import org.junit.Assert;
import org.junit.Test;

public class FooModelEqualsTest {

    @Test
    public void objectsAreSameInstance() {
        FooModel foo1 = new FooModel(1L, "Foo");
        FooModel foo2 = foo1;
        Assert.assertTrue(foo1.equals(foo2));
    }

    @Test
    public void objectComparedWithNull() {
        FooModel foo = new FooModel(1L, "Foo");
        Assert.assertFalse(foo.equals(null));
    }

    @Test
    public void objectsOfDifferentClasses() {
        FooModel foo = new FooModel(1L, "Foo");
        Object obj = new Object();
        Assert.assertFalse(foo.equals(obj));
    }

    @Test
    public void equalObjectsWithNonNullFields() {
        FooModel foo1 = new FooModel(1L, "Foo");
        FooModel foo2 = new FooModel(1L, "Foo");
        Assert.assertTrue(foo1.equals(foo2));
    }

    @Test
    public void objectsWithDifferingIdFields() {
        FooModel foo1 = new FooModel(1L, "Foo");
        FooModel foo2 = new FooModel(2L, "Foo");
        Assert.assertFalse(foo1.equals(foo2));
    }

    @Test
    public void objectsWithDifferingNameFields() {
        FooModel foo1 = new FooModel(1L, "Foo");
        FooModel foo2 = new FooModel(1L, "Bar");
        Assert.assertFalse(foo1.equals(foo2));
    }

    @Test
    public void objectsWithNullIdFields() {
        FooModel foo1 = new FooModel(null, "Foo");
        FooModel foo2 = new FooModel(null, "Foo");
        Assert.assertTrue(foo1.equals(foo2));
    }

    @Test
    public void oneObjectWithNullIdAndOtherWithNonNullId() {
        FooModel foo1 = new FooModel(null, "Foo");
        FooModel foo2 = new FooModel(1L, "Foo");
        Assert.assertFalse(foo1.equals(foo2));
    }

    @Test
    public void objectsWithNullNameFields() {
        FooModel foo1 = new FooModel(1L, null);
        FooModel foo2 = new FooModel(1L, null);
        Assert.assertTrue(foo1.equals(foo2));
    }

    @Test
    public void oneObjectWithNullNameAndOtherWithNonNullName() {
        FooModel foo1 = new FooModel(1L, null);
        FooModel foo2 = new FooModel(1L, "Foo");
        Assert.assertFalse(foo1.equals(foo2));
    }
}
