// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security-oauth-oauth-sso using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=setAdminUser_c2fd180352
ROOST_METHOD_SIG_HASH=setAdminUser_0e719a4240

Scenario 1: Valid AdminUser object is provided

Details:  
  TestName: setAdminUserWithValidObject
  Description: This test checks if the method setAdminUser correctly assigns a valid AdminUser object to the corresponding class field.
Execution:
  Arrange: Create a valid instance of AdminUser and get a reference to the class that contains the setAdminUser method.
  Act: Invoke the setAdminUser method with the created AdminUser instance.
  Assert: Verify that the class field adminUser is now referencing the provided AdminUser instance.
Validation: 
  The assertion confirms that the adminUser field is updated with the new instance. This is crucial for the correct functioning of the class, as other methods may rely on this field being accurately set.

Scenario 2: Null value is provided

Details:  
  TestName: setAdminUserWithNullValue
  Description: This test ensures that the method setAdminUser can handle a null input without throwing an exception, assuming the class is designed to accept null as a valid argument.
Execution:
  Arrange: Get a reference to the class that contains the setAdminUser method.
  Act: Invoke the setAdminUser method with a null value.
  Assert: Verify that the class field adminUser is now set to null.
Validation: 
  The assertion checks that the adminUser field can be set to null, which may be a valid case in scenarios where the admin user is being unset or cleared. It is important for the class to handle null values gracefully if the business logic permits it.

Scenario 3: AdminUser object with default values

Details:  
  TestName: setAdminUserWithDefaultValues
  Description: This test verifies that the method setAdminUser correctly assigns an AdminUser object that has not been explicitly initialized with any values (i.e., default constructor).
Execution:
  Arrange: Create an instance of AdminUser using the default constructor and get a reference to the class that contains the setAdminUser method.
  Act: Invoke the setAdminUser method with the newly created AdminUser instance.
  Assert: Verify that the class field adminUser is referencing the AdminUser instance with default values.
Validation: 
  The assertion confirms that adminUser field is set even when the provided AdminUser object has default values. This test ensures that the class is resilient to objects that may not be fully initialized.

Scenario 4: AdminUser object with invalid or incomplete data

Details:  
  TestName: setAdminUserWithInvalidData
  Description: This test checks the behavior of the setAdminUser method when provided with an AdminUser object that has invalid or incomplete data, assuming validation is not the responsibility of this method.
Execution:
  Arrange: Create an instance of AdminUser with invalid or incomplete data and get a reference to the class that contains the setAdminUser method.
  Act: Invoke the setAdminUser method with the invalid AdminUser instance.
  Assert: Verify that the class field adminUser is set to the invalid AdminUser instance.
Validation: 
  The assertion would validate that the adminUser field is still set even with invalid data. This is important if the method is designed to not perform validation, and instead rely on other parts of the system for ensuring data integrity.
*/

// ********RoostGPT********
package com.baeldung.auth.config;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class KeycloakServerPropertiesSetAdminUserTest {
    private KeycloakServerProperties keycloakServerProperties;
    private AdminUser validAdminUser;
    private AdminUser defaultAdminUser;
    private AdminUser invalidAdminUser;

    @Before
    public void setUp() {
        keycloakServerProperties = new KeycloakServerProperties();
        validAdminUser = new AdminUser();
        validAdminUser.setUsername("admin");
        validAdminUser.setPassword("admin");

        defaultAdminUser = new AdminUser();

        invalidAdminUser = new AdminUser();
        invalidAdminUser.setUsername(""); // TODO: Change to actual invalid data
        invalidAdminUser.setPassword(""); // TODO: Change to actual invalid data
    }

    @Test
    public void setAdminUserWithValidObject() {
        keycloakServerProperties.setAdminUser(validAdminUser);
        assertEquals("AdminUser should be set with valid object", validAdminUser, keycloakServerProperties.getAdminUser());
    }

    @Test
    public void setAdminUserWithNullValue() {
        keycloakServerProperties.setAdminUser(null);
        assertNull("AdminUser should be set to null", keycloakServerProperties.getAdminUser());
    }

    @Test
    public void setAdminUserWithDefaultValues() {
        keycloakServerProperties.setAdminUser(defaultAdminUser);
        assertEquals("AdminUser should be set with default values", defaultAdminUser, keycloakServerProperties.getAdminUser());
    }

    @Test
    public void setAdminUserWithInvalidData() {
        keycloakServerProperties.setAdminUser(invalidAdminUser);
        assertEquals("AdminUser should be set with invalid data", invalidAdminUser, keycloakServerProperties.getAdminUser());
    }
}
