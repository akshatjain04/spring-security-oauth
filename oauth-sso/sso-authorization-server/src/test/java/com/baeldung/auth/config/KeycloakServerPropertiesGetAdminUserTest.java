// ********RoostGPT********
/*
Test generated by RoostGPT for test spring-security-oauth-oauth-sso using AI Type Open AI and AI Model gpt-4-1106-preview

ROOST_METHOD_HASH=getAdminUser_128c628756
ROOST_METHOD_SIG_HASH=getAdminUser_45a225e52a

================================VULNERABILITIES================================
Vulnerability: CWE-200: Information Exposure
Issue: The method getAdminUser() may expose sensitive admin user information if not handled properly.
Solution: Ensure that the getAdminUser method has proper access controls in place, and sensitive information is not logged or exposed to unauthorized users.

Vulnerability: CWE-276: Incorrect Default Permissions
Issue: If the AdminUser object contains sensitive information and is exposed as a bean, it might have incorrect default permissions.
Solution: Define strict access control policies and apply the principle of least privilege to the AdminUser bean.

Vulnerability: CWE-489: Leftover Debug Code
Issue: The code may be part of a configuration class that was used for debugging purposes and inadvertently left in production code.
Solution: Review the codebase for any debug code or configurations that should not be present in the production environment and remove them.

Vulnerability: CWE-598: Information Exposure Through Query Strings in GET Request
Issue: If the AdminUser information is retrieved through a GET request, sensitive information could be exposed in URL query strings.
Solution: Avoid using GET requests to transfer sensitive information. Use POST requests with encrypted body content when dealing with sensitive data.

Vulnerability: CWE-522: Insufficiently Protected Credentials
Issue: The AdminUser object may contain credentials which are not sufficiently protected in memory or during retrieval.
Solution: Use strong encryption and hashing techniques to protect credentials. Avoid storing passwords in plain text and use secure credential storage mechanisms.

================================================================================
Scenario 1: AdminUser object retrieval

Details:  
  TestName: getAdminUserShouldReturnAdminUserObject
  Description: This test ensures that the getAdminUser method returns an instance of the AdminUser class.
Execution:
  Arrange: Instantiate the class containing the getAdminUser method, ensuring an AdminUser object is available for retrieval.
  Act: Call the getAdminUser method.
  Assert: Assert that the returned object is an instance of the AdminUser class.
Validation: 
  The assertion verifies that the method returns an AdminUser object as expected. The significance of this test is to confirm that the method behaves correctly under normal conditions by returning the correct object type.

Scenario 2: Consistency of returned AdminUser object

Details:  
  TestName: getAdminUserShouldReturnSameAdminUserObjectOnMultipleCalls
  Description: This test checks whether the getAdminUser method returns the same AdminUser object across multiple calls.
Execution:
  Arrange: Instantiate the class containing the getAdminUser method and call the method to get a reference to the AdminUser object.
  Act: Call the getAdminUser method multiple times.
  Assert: Assert that all returned objects are the same instance by comparing their references.
Validation: 
  The assertion aims to verify that the method consistently returns the same object instance on subsequent calls. This test is important to ensure the method does not create new objects with each call, which could lead to unexpected behavior in the application.

Scenario 3: Non-null AdminUser object

Details:  
  TestName: getAdminUserShouldReturnNonNullAdminUserObject
  Description: This test is designed to verify that the getAdminUser method never returns a null object.
Execution:
  Arrange: Instantiate the class containing the getAdminUser method.
  Act: Call the getAdminUser method.
  Assert: Assert that the returned AdminUser object is not null.
Validation: 
  The assertion checks that the returned object is not null, which is crucial for preventing NullPointerExceptions when the method is used in the application. The importance of this test lies in guaranteeing that the method is reliable and safe to use without additional null checks.

Scenario 4: AdminUser object properties

Details:  
  TestName: getAdminUserShouldHaveProperlySetProperties
  Description: This test ensures that the AdminUser object returned by the getAdminUser method has its properties set correctly.
Execution:
  Arrange: Instantiate the class containing the getAdminUser method and pre-populate the AdminUser object with known property values.
  Act: Call the getAdminUser method to retrieve the AdminUser object.
  Assert: Assert that each property of the returned AdminUser object matches the expected values.
Validation: 
  The assertion verifies that the properties of the AdminUser object are set and retrieved correctly. This test is significant for verifying data integrity and ensuring that the method does not alter the AdminUser object's state inadvertently.
*/

// ********RoostGPT********

package com.baeldung.auth.config;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertEquals; // Added import statement for assertEquals

import org.junit.Before;
import org.junit.Test;

public class KeycloakServerPropertiesGetAdminUserTest {

    private KeycloakServerProperties keycloakServerProperties;
    private AdminUser expectedAdminUser;

    @Before
    public void setUp() {
        // Arrange for all tests
        keycloakServerProperties = new KeycloakServerProperties();
        expectedAdminUser = new AdminUser();
        expectedAdminUser.setUsername("admin"); // TODO: Change if necessary
        expectedAdminUser.setPassword("admin"); // TODO: Change if necessary
        keycloakServerProperties.setAdminUser(expectedAdminUser);
    }

    @Test
    public void getAdminUserShouldReturnAdminUserObject() {
        // Act
        AdminUser actualAdminUser = keycloakServerProperties.getAdminUser();

        // Assert
        assertNotNull("AdminUser object should not be null", actualAdminUser);
        assertSame("Returned object should be an instance of AdminUser", expectedAdminUser, actualAdminUser);
    }

    @Test
    public void getAdminUserShouldReturnSameAdminUserObjectOnMultipleCalls() {
        // Act
        AdminUser firstCallAdminUser = keycloakServerProperties.getAdminUser();
        AdminUser secondCallAdminUser = keycloakServerProperties.getAdminUser();

        // Assert
        assertSame("Multiple calls should return the same AdminUser object", firstCallAdminUser, secondCallAdminUser);
    }

    @Test
    public void getAdminUserShouldReturnNonNullAdminUserObject() {
        // Act
        AdminUser adminUser = keycloakServerProperties.getAdminUser();

        // Assert
        assertNotNull("getAdminUser method should never return null", adminUser);
    }

    @Test
    public void getAdminUserShouldHaveProperlySetProperties() {
        // Act
        AdminUser adminUser = keycloakServerProperties.getAdminUser();

        // Assert
        assertNotNull("AdminUser object should not be null", adminUser);
        assertEquals("Username should be set correctly", "admin", adminUser.getUsername());
        assertEquals("Password should be set correctly", "admin", adminUser.getPassword());
    }
}
